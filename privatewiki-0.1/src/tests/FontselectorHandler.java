// Generated by ThinG on 07-feb-2005 16:33:15.

package tests;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.RenderingHints;

import thinlet.Thinlet;
import thinlet.FrameLauncher;

/**
 * A thinlet with the contents of "<code>fontselector.xml</code>".
 */
public class FontselectorHandler extends Thinlet
{

    /**
     * Create a new FontselectorHandler instance.
     */
    public FontselectorHandler() throws java.io.IOException
    {
        add(parse("/xml/fontselector.xml"));
    }
    
    public void initFontSelector(Object panel){
    	
        // add a font-list
        Object fontList = create("list");
        setInteger(fontList, "weightx", 1);
        setInteger(fontList, "weighty", 1);
        setMethod(fontList, "action", "onFontSelect(this)", panel, this);
        add(panel, fontList);
        
        // Get a GraphicsEnvironment to query font names
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = ge.getAvailableFontFamilyNames();
        
        // add fontnames to the list
        for (int i=0; fontNames!=null && i<fontNames.length; i++){
        	
        	Object item = create("item");
        	setString(item, "text", fontNames[i] );
        	setFont(item, new Font(fontNames[i], Font.PLAIN, 28));
        	add(fontList, item);
        }

    }
    
    public void onFontSelect(Object list){
    	
    	Object item = getSelectedItem(list);
    	String fontSelected = getString(item, "text");
    	System.out.println("'" + fontSelected + "' selected.");
    }


    /**
     * Show a test frame with the Thinlet contents.
     *
     * @param args  ignored.
     */
    public static void main(String[] args) throws java.io.IOException
    {
        new FrameLauncher("FontselectorHandler", new FontselectorHandler(), 400, 400);
    }

    public void paint(Graphics g)
    {
        ((Graphics2D) g).setRenderingHint(
            RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
        ((Graphics2D) g).setRenderingHint(
            RenderingHints.KEY_TEXT_ANTIALIASING,
            RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        super.paint(g);
    }

}
